{
  "id": "dcc40071b57532b69eb6202b2bae8d1c",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.5",
  "solcLongVersion": "0.7.5+commit.eb77ed08",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/interfaces/IRewardsOracle.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.7.5;\npragma abicoder v2;\n\ninterface IRewardsOracle {\n\n  /**\n   * @notice Returns the oracle value, agreed upon by all oracle signers. If the signers have not\n   *  agreed upon a value, should return zero for all return values.\n   *\n   * @return  merkleRoot  The Merkle root for the next Merkle distributor update.\n   * @return  epoch       The epoch number corresponding to the new Merkle root.\n   * @return  ipfsCid     An IPFS CID pointing to the Merkle tree data.\n   */\n  function read()\n    external\n    virtual\n    view\n    returns (bytes32 merkleRoot, uint256 epoch, bytes memory ipfsCid);\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "storageLayout"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/interfaces/IRewardsOracle.sol": {
        "IRewardsOracle": {
          "abi": [
            {
              "inputs": [],
              "name": "read",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "epoch",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "ipfsCid",
                  "type": "bytes"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "read()": "57de26a4"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ipfsCid\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"read()\":{\"returns\":{\"epoch\":\"      The epoch number corresponding to the new Merkle root.\",\"ipfsCid\":\"    An IPFS CID pointing to the Merkle tree data.\",\"merkleRoot\":\" The Merkle root for the next Merkle distributor update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"read()\":{\"notice\":\"Returns the oracle value, agreed upon by all oracle signers. If the signers have not  agreed upon a value, should return zero for all return values.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IRewardsOracle.sol\":\"IRewardsOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IRewardsOracle.sol\":{\"keccak256\":\"0x2a22acfdc348893de8d108713080128e62c52c66d010a51279589b707ed6e331\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cf4bff7aec2ddb0f908de73b068983f9e7f4078e73f969f688fc34c9004a5016\",\"dweb:/ipfs/QmQNZEUfbZGh2DHESz7DEr3PZKw438FZtZyfYedLMuGtb4\"]}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          }
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "errorCode": "5815",
        "formattedMessage": "contracts/interfaces/IRewardsOracle.sol:15:3: Warning: Interface functions are implicitly \"virtual\"\n  function read()\n  ^ (Relevant source part starts here and spans across multiple lines).\n",
        "message": "Interface functions are implicitly \"virtual\"",
        "severity": "warning",
        "sourceLocation": {
          "end": 652,
          "file": "contracts/interfaces/IRewardsOracle.sol",
          "start": 532
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/interfaces/IRewardsOracle.sol": {
        "ast": {
          "absolutePath": "contracts/interfaces/IRewardsOracle.sol",
          "exportedSymbols": {
            "IRewardsOracle": [
              13
            ]
          },
          "id": 14,
          "license": "Apache-2.0",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.7",
                ".5"
              ],
              "nodeType": "PragmaDirective",
              "src": "39:22:0"
            },
            {
              "id": 2,
              "literals": [
                "abicoder",
                "v2"
              ],
              "nodeType": "PragmaDirective",
              "src": "62:19:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 13,
              "linearizedBaseContracts": [
                13
              ],
              "name": "IRewardsOracle",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "113:416:0",
                    "text": " @notice Returns the oracle value, agreed upon by all oracle signers. If the signers have not\n  agreed upon a value, should return zero for all return values.\n @return  merkleRoot  The Merkle root for the next Merkle distributor update.\n @return  epoch       The epoch number corresponding to the new Merkle root.\n @return  ipfsCid     An IPFS CID pointing to the Merkle tree data."
                  },
                  "functionSelector": "57de26a4",
                  "id": 12,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "read",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "545:2:0"
                  },
                  "returnParameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "mutability": "mutable",
                        "name": "merkleRoot",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "595:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 5,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "595:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 8,
                        "mutability": "mutable",
                        "name": "epoch",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "615:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 7,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "615:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 10,
                        "mutability": "mutable",
                        "name": "ipfsCid",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "630:20:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 9,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "630:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "594:57:0"
                  },
                  "scope": 13,
                  "src": "532:120:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "external"
                }
              ],
              "scope": 14,
              "src": "83:571:0"
            }
          ],
          "src": "39:616:0"
        },
        "id": 0
      }
    }
  }
}
